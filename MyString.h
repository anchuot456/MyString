#ifndef __MYSTRING_H__
#define __MYSTRING_H__
#include<iostream>
using namespace std;
static const size_t npos = -1;
class MyString
{
private:
	char* str;
	unsigned long str_size;
	unsigned long str_capacity;
	void construction(const char* other);
public:
	MyString();
	MyString(const MyString& other);
	MyString(const MyString& other,size_t pos,size_t len = npos);
	MyString(const char* other);
	MyString(const char* other,size_t n);
	MyString(size_t n,char c);
	~MyString();
	MyString& operator =(const MyString&str2);
	MyString& operator =(const char* str2);
	MyString& operator =(char c);
	char* begin();
	char* end();
	char* rbegin();
	char* rend();
	const char* cbegin()const;
	const char* cend()const;
	const char* crbegin()const;
	const char* crend()const;
	size_t size();
	size_t length();
	size_t max_size()const;
	void resize(size_t n);
	void resize(size_t n, char c);
	size_t capacity()const;
	void reserve(size_t n = 0);
	void clear();
	bool empty()const;
	void shrink_to_fit();
	char& operator[](size_t pos);
	char& at(size_t pos);
	char& back();
	char& front();
	MyString& operator+= (const MyString& rhs);
	MyString& operator+= (const char* rhs);
	MyString& operator+= (char c);
	MyString operator+ (const MyString& rhs);
	MyString operator+ (const char* rhs);
	MyString operator+ (char c);
	friend MyString operator+ (const MyString& lhs, const MyString& rhs);
	friend MyString operator+ (const MyString& lhs, const char* rhs);
	friend MyString operator+ (const char* lhs, const MyString& rhs);
	friend MyString operator+ (char c, const MyString& rhs);
	friend MyString operator+ (const MyString& lhs,char c);
	MyString& append(const MyString& str);
	MyString& append(const MyString& str,size_t subpos,size_t sublen);
	MyString& append(const char* str);
	MyString& append(const char* str,size_t n);
	MyString& append(size_t n,char c);
	MyString& push_back(char c);
	MyString& assign(const MyString& str);
	MyString& assign(const MyString& str, size_t subpos, size_t sublen);
	MyString& assign(const char* str);
	MyString& assign(const char* str,size_t n);
	MyString& assign(size_t n,char c);
	MyString& insert(size_t pos, const MyString& str);
	MyString& insert(size_t pos, const MyString& str,size_t subpos,size_t sublen);
	MyString& insert(size_t pos, const char* str);
	MyString& insert(size_t pos, const char* str,size_t n);
	MyString& insert(size_t pos, size_t n, char c);
	MyString& erase(size_t pos = 0, size_t len = npos);
	MyString& erase(char* p);
	MyString& erase(char* first,char* last);
	MyString& replace(size_t pos, size_t len, const MyString& str);
	MyString& replace(size_t pos, size_t len, const MyString& str,size_t subpos,size_t sublen);
	MyString& replace(size_t pos, size_t len, const char* str);
	MyString& replace(size_t pos, size_t len, const char* str,size_t n);
	MyString& replace(size_t pos, size_t len, size_t n, char c);
	MyString& replace(char* i1, char* i2, const MyString& str);
	MyString& replace(char* i1, char* i2, const char* str);
	MyString& replace(char* i1, char* i2, const char* str,size_t n);
	MyString& replace(char* i1, char* i2, size_t n,char c);
	friend void swap(MyString& x,MyString& y);
	void popback();
	const char*c_str()const;
	const char*data()const;
	size_t copy(char* s, size_t len, size_t pos = 0) const;
	size_t find(const MyString& str, size_t pos = 0) const;
	size_t find(const char* s, size_t pos = 0) const;
	size_t find(const char* s, size_t pos, size_t n) const;
	size_t find(char c, size_t pos = 0) const;
	size_t rfind(const MyString& str, size_t pos = npos) const;
	size_t rfind(const char* s, size_t pos = npos) const;
	size_t rfind(const char* s, size_t pos, size_t n) const;
	size_t rfind(char c, size_t pos = npos) const;
	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	size_t find_first_of(const char* s, size_t pos = 0) const;
	size_t find_first_of(const char* s, size_t pos, size_t n) const;
	size_t find_first_of(char c, size_t pos = 0) const;
	size_t find_last_of(const MyString& str, size_t pos = npos) const;
	size_t find_last_of(const char* s, size_t pos = npos) const;
	size_t find_last_of(const char* s, size_t pos, size_t n) const;
	size_t find_last_of(char c, size_t pos = npos) const;
	size_t find_first_not_of(const MyString& str, size_t pos = 0) const;
	size_t find_first_not_of(const char* s, size_t pos = 0) const;
	size_t find_first_not_of(const char* s, size_t pos, size_t n) const;
	size_t find_first_not_of(char c, size_t pos = 0) const;
	size_t find_last_not_of(const MyString& str, size_t pos = npos) const;
	size_t find_last_not_of(const char* s, size_t pos = npos) const;
	size_t find_last_not_of(const char* s, size_t pos, size_t n) const;
	size_t find_last_not_of(char c, size_t pos = npos) const;
	MyString substr(size_t pos = 0, size_t len = npos) const;
	int compare(const MyString& str) const;
	int compare(size_t pos, size_t len, const MyString& str) const;
	int compare(size_t pos, size_t len, const MyString& str,size_t subpos, size_t sublen) const;
	int compare(const char* s) const;
	int compare(size_t pos, size_t len, const char* s) const;
	int compare(size_t pos, size_t len, const char* s, size_t n) const;

	bool operator== (const MyString& rhs);
	bool operator== (const char* rhs);
	bool operator!= (const MyString& rhs);
	bool operator!= (const char* rhs);
	bool operator< (const MyString& rhs);
	bool operator< (const char* rhs);
	bool operator<= (const MyString& rhs);
	bool operator<= (const char* rhs);
	bool operator> (const MyString& rhs);
	bool operator> (const char* rhs);
	bool operator>= (const MyString& rhs);
	bool operator>= (const char* rhs);
	friend bool operator== (const MyString& lhs, const MyString& rhs);
	friend bool operator== (const char*   lhs, const MyString& rhs);
	friend bool operator== (const MyString& lhs, const char*   rhs);
	friend bool operator!= (const MyString& lhs, const MyString& rhs);
	friend bool operator!= (const char*   lhs, const MyString& rhs);
	friend bool operator!= (const MyString& lhs, const char*   rhs);
	friend bool operator<  (const MyString& lhs, const MyString& rhs);
	friend bool operator<  (const char*   lhs, const MyString& rhs);
	friend bool operator<  (const MyString& lhs, const char*   rhs);
	friend bool operator<= (const MyString& lhs, const MyString& rhs);
	friend bool operator<= (const char*   lhs, const MyString& rhs);
	friend bool operator<= (const MyString& lhs, const char*   rhs);
	friend bool operator>  (const MyString& lhs, const MyString& rhs);
	friend bool operator>  (const char*   lhs, const MyString& rhs);
	friend bool operator>  (const MyString& lhs, const char*   rhs);
	friend bool operator>= (const MyString& lhs, const MyString& rhs);
	friend bool operator>= (const char*   lhs, const MyString& rhs);
	friend bool operator>= (const MyString& lhs, const char*   rhs);
	friend istream& operator>> (istream& is, MyString& str);
	friend ostream& operator<< (ostream& os, const MyString& str);
	friend istream& getline(istream& is, MyString& str, char delim);
	friend istream& getline(istream& is, MyString& str);
};
#endif
